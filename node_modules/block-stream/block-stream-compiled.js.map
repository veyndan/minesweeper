{"version":3,"sources":["block-stream.js"],"names":[],"mappings":"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","file":"block-stream-compiled.js","sourcesContent":["// write data to it, and it'll emit data in 512 byte blocks.\n// if you .end() or .flush(), it'll emit whatever it's got,\n// padded with nulls to 512 bytes.\n\nmodule.exports = BlockStream\n\nvar Stream = require(\"stream\").Stream\n  , inherits = require(\"inherits\")\n  , assert = require(\"assert\").ok\n  , debug = process.env.DEBUG ? console.error : function () {}\n\nfunction BlockStream (size, opt) {\n  this.writable = this.readable = true\n  this._opt = opt || {}\n  this._chunkSize = size || 512\n  this._offset = 0\n  this._buffer = []\n  this._bufferLength = 0\n  if (this._opt.nopad) this._zeroes = false\n  else {\n    this._zeroes = new Buffer(this._chunkSize)\n    for (var i = 0; i < this._chunkSize; i ++) {\n      this._zeroes[i] = 0\n    }\n  }\n}\n\ninherits(BlockStream, Stream)\n\nBlockStream.prototype.write = function (c) {\n  // debug(\"   BS write\", c)\n  if (this._ended) throw new Error(\"BlockStream: write after end\")\n  if (c && !Buffer.isBuffer(c)) c = new Buffer(c + \"\")\n  if (c.length) {\n    this._buffer.push(c)\n    this._bufferLength += c.length\n  }\n  // debug(\"pushed onto buffer\", this._bufferLength)\n  if (this._bufferLength >= this._chunkSize) {\n    if (this._paused) {\n      // debug(\"   BS paused, return false, need drain\")\n      this._needDrain = true\n      return false\n    }\n    this._emitChunk()\n  }\n  return true\n}\n\nBlockStream.prototype.pause = function () {\n  // debug(\"   BS pausing\")\n  this._paused = true\n}\n\nBlockStream.prototype.resume = function () {\n  // debug(\"   BS resume\")\n  this._paused = false\n  return this._emitChunk()\n}\n\nBlockStream.prototype.end = function (chunk) {\n  // debug(\"end\", chunk)\n  if (typeof chunk === \"function\") cb = chunk, chunk = null\n  if (chunk) this.write(chunk)\n  this._ended = true\n  this.flush()\n}\n\nBlockStream.prototype.flush = function () {\n  this._emitChunk(true)\n}\n\nBlockStream.prototype._emitChunk = function (flush) {\n  // debug(\"emitChunk flush=%j emitting=%j paused=%j\", flush, this._emitting, this._paused)\n\n  // emit a <chunkSize> chunk\n  if (flush && this._zeroes) {\n    // debug(\"    BS push zeroes\", this._bufferLength)\n    // push a chunk of zeroes\n    var padBytes = (this._bufferLength % this._chunkSize)\n    if (padBytes !== 0) padBytes = this._chunkSize - padBytes\n    if (padBytes > 0) {\n      // debug(\"padBytes\", padBytes, this._zeroes.slice(0, padBytes))\n      this._buffer.push(this._zeroes.slice(0, padBytes))\n      this._bufferLength += padBytes\n      // debug(this._buffer[this._buffer.length - 1].length, this._bufferLength)\n    }\n  }\n\n  if (this._emitting || this._paused) return\n  this._emitting = true\n\n  // debug(\"    BS entering loops\")\n  var bufferIndex = 0\n  while (this._bufferLength >= this._chunkSize &&\n         (flush || !this._paused)) {\n    // debug(\"     BS data emission loop\", this._bufferLength)\n\n    var out\n      , outOffset = 0\n      , outHas = this._chunkSize\n\n    while (outHas > 0 && (flush || !this._paused) ) {\n      // debug(\"    BS data inner emit loop\", this._bufferLength)\n      var cur = this._buffer[bufferIndex]\n        , curHas = cur.length - this._offset\n      // debug(\"cur=\", cur)\n      // debug(\"curHas=%j\", curHas)\n      // If it's not big enough to fill the whole thing, then we'll need\n      // to copy multiple buffers into one.  However, if it is big enough,\n      // then just slice out the part we want, to save unnecessary copying.\n      // Also, need to copy if we've already done some copying, since buffers\n      // can't be joined like cons strings.\n      if (out || curHas < outHas) {\n        out = out || new Buffer(this._chunkSize)\n        cur.copy(out, outOffset,\n                 this._offset, this._offset + Math.min(curHas, outHas))\n      } else if (cur.length === outHas && this._offset === 0) {\n        // shortcut -- cur is exactly long enough, and no offset.\n        out = cur\n      } else {\n        // slice out the piece of cur that we need.\n        out = cur.slice(this._offset, this._offset + outHas)\n      }\n\n      if (curHas > outHas) {\n        // means that the current buffer couldn't be completely output\n        // update this._offset to reflect how much WAS written\n        this._offset += outHas\n        outHas = 0\n      } else {\n        // output the entire current chunk.\n        // toss it away\n        outHas -= curHas\n        outOffset += curHas\n        bufferIndex ++\n        this._offset = 0\n      }\n    }\n\n    this._bufferLength -= this._chunkSize\n    assert(out.length === this._chunkSize)\n    // debug(\"emitting data\", out)\n    // debug(\"   BS emitting, paused=%j\", this._paused, this._bufferLength)\n    this.emit(\"data\", out)\n    out = null\n  }\n  // debug(\"    BS out of loops\", this._bufferLength)\n\n  // whatever is left, it's not enough to fill up a block, or we're paused\n  this._buffer = this._buffer.slice(bufferIndex)\n  if (this._paused) {\n    // debug(\"    BS paused, leaving\", this._bufferLength)\n    this._needsDrain = true\n    this._emitting = false\n    return\n  }\n\n  // if flushing, and not using null-padding, then need to emit the last\n  // chunk(s) sitting in the queue.  We know that it's not enough to\n  // fill up a whole block, because otherwise it would have been emitted\n  // above, but there may be some offset.\n  var l = this._buffer.length\n  if (flush && !this._zeroes && l) {\n    if (l === 1) {\n      if (this._offset) {\n        this.emit(\"data\", this._buffer[0].slice(this._offset))\n      } else {\n        this.emit(\"data\", this._buffer[0])\n      }\n    } else {\n      var outHas = this._bufferLength\n        , out = new Buffer(outHas)\n        , outOffset = 0\n      for (var i = 0; i < l; i ++) {\n        var cur = this._buffer[i]\n          , curHas = cur.length - this._offset\n        cur.copy(out, outOffset, this._offset)\n        this._offset = 0\n        outOffset += curHas\n        this._bufferLength -= curHas\n      }\n      this.emit(\"data\", out)\n    }\n    // truncate\n    this._buffer.length = 0\n    this._bufferLength = 0\n    this._offset = 0\n  }\n\n  // now either drained or ended\n  // debug(\"either draining, or ended\", this._bufferLength, this._ended)\n  // means that we've flushed out all that we can so far.\n  if (this._needDrain) {\n    // debug(\"emitting drain\", this._bufferLength)\n    this._needDrain = false\n    this.emit(\"drain\")\n  }\n\n  if ((this._bufferLength === 0) && this._ended && !this._endEmitted) {\n    // debug(\"emitting end\", this._bufferLength)\n    this._endEmitted = true\n    this.emit(\"end\")\n  }\n\n  this._emitting = false\n\n  // debug(\"    BS no longer emitting\", flush, this._paused, this._emitting, this._bufferLength, this._chunkSize)\n}\n"]}