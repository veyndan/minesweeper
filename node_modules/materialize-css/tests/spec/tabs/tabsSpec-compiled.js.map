{"version":3,"sources":["tabsSpec.js"],"names":[],"mappings":"AAAA,SAAS,aAAT,EAAwB,YAAY;AAClC,aAAW,YAAW;AACpB,iBAAa,uBAAb;AACA,MAAE,SAAF,EAAa,IAAb;AACD,GAHD;;AAKA,WAAS,MAAT,EAAiB,YAAY;AAC3B,QAAI,UAAJ;;AAEA,eAAW,YAAW;AACpB,mBAAa,EAAE,cAAF,CAAb;AACD,KAFD;;AAIA,OAAG,2BAAH,EAAgC,YAAY;AAC1C,UAAI,YAAY,WAAW,IAAX,CAAgB,SAAhB,CAAhB;AACA,UAAI,gBAAgB,UAAU,IAAV,CAAe,MAAf,CAApB;AACA,iBAAW,IAAX,CAAgB,QAAhB,EAA0B,IAA1B,CAA+B,YAAW;AACxC,YAAI,UAAU,EAAE,IAAF,EAAQ,IAAR,CAAa,MAAb,CAAd;AACA,YAAI,YAAY,aAAhB,EAA+B;AAC7B,iBAAO,EAAE,OAAF,CAAP,EAAmB,WAAnB,CAA+B,iDAA/B;AACD,SAFD,MAEO;AACL,iBAAO,EAAE,OAAF,CAAP,EAAmB,UAAnB,CAA8B,yCAA9B;AACD;AACF,OAPD;;AASA,UAAI,YAAY,WAAW,IAAX,CAAgB,YAAhB,CAAhB;AACA,aAAO,SAAP,EAAkB,OAAlB,CAA0B,+BAA1B;;AAED,KAfD;;AAiBA,OAAG,8BAAH,EAAmC,UAAU,IAAV,EAAgB;AACjD,UAAI,YAAY,WAAW,IAAX,CAAgB,SAAhB,CAAhB;AACA,UAAI,gBAAgB,UAAU,IAAV,CAAe,MAAf,CAApB;AACA,UAAI,cAAc,WAAW,IAAX,CAAgB,aAAhB,CAAlB;AACA,UAAI,kBAAkB,YAAY,IAAZ,CAAiB,MAAjB,CAAtB;AACA,UAAI,WAAW,WAAW,IAAX,CAAgB,QAAhB,EAA0B,KAA1B,EAAf;AACA,UAAI,eAAe,SAAS,IAAT,CAAc,MAAd,CAAnB;AACA,UAAI,YAAY,WAAW,IAAX,CAAgB,YAAhB,CAAhB;;AAEA,aAAO,SAAP,EAAkB,OAAlB,CAA0B,+BAA1B;;;AAGA,kBAAY,KAAZ;;AAEA,iBAAW,YAAW;AACpB,eAAO,EAAE,aAAF,CAAP,EAAyB,WAAzB,CAAqC,2CAArC;AACA,eAAO,EAAE,eAAF,CAAP,EAA2B,UAA3B,CAAsC,2CAAtC;;AAEA,iBAAS,KAAT;;AAEA,mBAAW,YAAW;AACpB,iBAAO,EAAE,aAAF,CAAP,EAAyB,UAAzB,CAAoC,yCAApC;AACA,iBAAO,EAAE,YAAF,CAAP,EAAwB,WAAxB,CAAoC,yCAApC;AACA,iBAAO,UAAU,MAAV,GAAmB,IAA1B,EAAgC,OAAhC,CAAwC,SAAS,MAAT,GAAkB,IAA1D,EAAgE,uCAAhE;AACA;AACD,SALD,EAKG,GALH;AAMD,OAZD,EAYG,GAZH;AAcD,KA5BD;;AA8BA,OAAG,+CAAH,EAAoD,YAAY;AAC9D,UAAI,kBAAkB,CAAtB;AACA,iBAAW,MAAX,GAAoB,GAApB,CAAwB,OAAxB,EAAiC,OAAjC;AACA,iBAAW,IAAX,CAAgB,MAAhB,EAAwB,IAAxB,CAA6B,YAAW;AACtC,2BAAmB,EAAE,IAAF,EAAQ,KAAR,EAAnB;AACD,OAFD;;AAIA,aAAO,eAAP,EAAwB,eAAxB,CAAwC,WAAW,KAAX,EAAxC,EAA4D,uCAA5D;AACD,KARD;AAUD,GAhED;AAiED,CAvED","file":"tabsSpec-compiled.js","sourcesContent":["describe(\"Tabs Plugin\", function () {\n  beforeEach(function() {\n    loadFixtures('tabs/tabsFixture.html');\n    $('ul.tabs').tabs();\n  });\n\n  describe(\"Tabs\", function () {\n    var normalTabs;\n\n    beforeEach(function() {\n      normalTabs = $('.tabs.normal');\n    });\n\n    it(\"should open to active tab\", function () {\n      var activeTab = normalTabs.find('.active');\n      var activeTabHash = activeTab.attr('href');\n      normalTabs.find('.tab a').each(function() {\n        var tabHash = $(this).attr('href');\n        if (tabHash === activeTabHash) {\n          expect($(tabHash)).toBeVisible('active tab content should be visible by default');\n        } else {\n          expect($(tabHash)).toBeHidden('Tab content should be hidden by default');\n        }\n      });\n\n      var indicator = normalTabs.find('.indicator');\n      expect(indicator).toExist('Indicator should be generated');\n      // expect(Math.abs(indicator.offset().left - activeTab.offset().left)).toBeLessThan(1, 'Indicator should be at active tab by default.');\n    });\n\n    it(\"should switch to clicked tab\", function (done) {\n      var activeTab = normalTabs.find('.active');\n      var activeTabHash = activeTab.attr('href');\n      var disabledTab = normalTabs.find('.disabled a');\n      var disabledTabHash = disabledTab.attr('href');\n      var firstTab = normalTabs.find('.tab a').first();\n      var firstTabHash = firstTab.attr('href');\n      var indicator = normalTabs.find('.indicator');\n\n      expect(indicator).toExist('Indicator should be generated');\n      // expect(Math.abs(indicator.offset().left - activeTab.offset().left)).toBeLessThan(1, 'Indicator should be at active tab by default.');\n\n      disabledTab.click();\n\n      setTimeout(function() {\n        expect($(activeTabHash)).toBeVisible('Clicking disabled should not change tabs.');\n        expect($(disabledTabHash)).toBeHidden('Clicking disabled should not change tabs.');\n\n        firstTab.click();\n\n        setTimeout(function() {\n          expect($(activeTabHash)).toBeHidden('Clicking tab should switch to that tab.');\n          expect($(firstTabHash)).toBeVisible('Clicking tab should switch to that tab.');\n          expect(indicator.offset().left).toEqual(firstTab.offset().left, 'Indicator should move to clicked tab.');\n          done();\n        }, 400);\n      }, 400);\n\n    });\n\n    it(\"should horizontally scroll when too many tabs\", function () {\n      var tabsScrollWidth = 0;\n      normalTabs.parent().css('width', '400px');\n      normalTabs.find('.tab').each(function() {\n        tabsScrollWidth += $(this).width();\n      });\n\n      expect(tabsScrollWidth).toBeGreaterThan(normalTabs.width(), 'Scroll width should exceed tabs width');\n    });\n\n  });\n});"]}