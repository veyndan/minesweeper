{"version":3,"sources":["selectSpec.js"],"names":[],"mappings":"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","file":"selectSpec-compiled.js","sourcesContent":["describe(\"Select Plugin\", function () {\n  beforeEach(function() {\n    loadFixtures('select/selectFixture.html');\n    $('select').not('.disabled').material_select();\n  });\n\n  describe(\"Select\", function () {\n    var browserSelect, normalInput, normalDropdown;\n\n    beforeEach(function() {\n      browserSelect = $('select.normal');\n    });\n\n    it(\"should open dropdown and select option\", function (done) {\n      normalInput = browserSelect.parent().find('input.select-dropdown');\n      normalDropdown = browserSelect.parent().find('ul.select-dropdown');\n\n      expect(normalInput).toExist('Should dynamically generate select dropdown structure.');\n      expect(normalDropdown).toExist('Should dynamically generate select dropdown structure.');\n      expect(normalInput).toBeVisible('Should be hidden before dropdown is opened.');\n      expect(normalDropdown).toBeHidden('Should be hidden before dropdown is opened.');\n\n      normalInput.click();\n\n      setTimeout(function() {\n        expect(normalDropdown).toBeVisible('Should be visible after opening.');\n        var firstOption = normalDropdown.find('li:not(.disabled)').first();\n        firstOption.click();\n        normalInput.blur();\n\n        setTimeout(function() {\n          expect(normalDropdown).toBeHidden('Should be hidden after choosing item.');\n          expect(normalInput.val()).toEqual(firstOption[0].innerText, 'Value should equal chosen option.');\n          done();\n        }, 400);\n      }, 400);\n    });\n\n    it(\"should have pre-selected value\", function () {\n      normalInput = browserSelect.parent().find('input.select-dropdown');\n      normalDropdown = browserSelect.parent().find('ul.select-dropdown');\n\n      var firstOption = browserSelect.find('option[selected]');\n      expect(normalInput.val()).toEqual(firstOption.text(), 'Value should be equal to preselected option.');\n    });\n  });\n\n  describe(\"Multiple Select\", function () {\n    var browserSelect, multipleInput, multipleDropdown;\n\n    beforeEach(function() {\n      browserSelect = $('select.multiple');\n    });\n\n    it(\"should open dropdown and select multiple options\", function(done) {\n      multipleInput = browserSelect.parent().find('input.select-dropdown');\n      multipleDropdown = browserSelect.parent().find('ul.select-dropdown');\n\n      expect(multipleInput).toExist('Should dynamically generate select dropdown structure.');\n      expect(multipleDropdown).toExist('Should dynamically generate select dropdown structure.');\n      expect(multipleInput).toBeVisible('Should be hidden before dropdown is opened.');\n      expect(multipleDropdown).toBeHidden('Should be hidden before dropdown is opened.');\n\n      multipleInput.click();\n\n      setTimeout(function() {\n        expect(multipleDropdown).toBeVisible('Should be visible after opening.');\n        var firstOption = multipleDropdown.find('li:not(.disabled)').first();\n        var secondOption = multipleDropdown.find('li:not(.disabled)').eq(1);\n        var thirdOption = multipleDropdown.find('li:not(.disabled)').eq(2);\n        firstOption.click();\n        $('body').click();\n\n        setTimeout(function() {\n          expect(multipleDropdown).toBeHidden('Should be hidden after choosing item.');\n          expect(browserSelect.val()).toEqual(['1', '2', '3'], 'Actual select should have correct selected values.');\n          expect(multipleInput.val()).toEqual(secondOption[0].innerText + ', ' + thirdOption[0].innerText + ', ' + firstOption[0].innerText, 'Value should equal chosen multiple options.');\n          done();\n        }, 400);\n      }, 400);\n    });\n\n    it(\"should open dropdown and deselect multiple options\", function(done) {\n      multipleInput = browserSelect.parent().find('input.select-dropdown');\n      multipleDropdown = browserSelect.parent().find('ul.select-dropdown');\n\n      expect(multipleInput).toExist('Should dynamically generate select dropdown structure.');\n      expect(multipleDropdown).toExist('Should dynamically generate select dropdown structure.');\n      expect(multipleInput).toBeVisible('Should be hidden before dropdown is opened.');\n      expect(multipleDropdown).toBeHidden('Should be hidden before dropdown is opened.');\n\n      multipleInput.click();\n\n      setTimeout(function() {\n        expect(multipleDropdown).toBeVisible('Should be visible after opening.');\n        var disabledOption = multipleDropdown.find('li.disabled');\n        var secondOption = multipleDropdown.find('li:not(.disabled)').eq(1);\n        var thirdOption = multipleDropdown.find('li:not(.disabled)').eq(2);\n        secondOption.click();\n        thirdOption.click();\n        $('body').click();\n\n        setTimeout(function() {\n          expect(multipleDropdown).toBeHidden('Should be hidden after choosing item.');\n          expect(browserSelect.val()).toEqual(null, 'Actual select element should be empty because none chosen.');\n          expect(multipleInput.val()).toEqual(disabledOption[0].innerText, 'Value should equal default because none chosen.');\n          done();\n        }, 400);\n      }, 400);\n    });\n\n    it(\"should have multiple pre-selected values\", function () {\n      multipleInput = browserSelect.parent().find('input.select-dropdown');\n      multipleDropdown = browserSelect.parent().find('ul.select-dropdown');\n\n      var secondOption = browserSelect.find('option[selected]').eq(0);\n      var thirdOption = browserSelect.find('option[selected]').eq(1);\n      expect(multipleInput.val()).toEqual(secondOption.text() + ', ' + thirdOption.text(), 'Value should be equal to preselected option.');\n    });\n  });\n\n  describe(\"Optgroup Select\", function () {\n    var browserSelect, optInput, optDropdown, optionInOptgroup, optionAfterOptGroup;\n\n    beforeEach(function() {\n      browserSelect = $('select.optgroup');\n    });\n\n    it(\"should open dropdown and select options\", function(done) {\n      optInput = browserSelect.parent().find('input.select-dropdown');\n      optDropdown = browserSelect.parent().find('ul.select-dropdown');\n\n      var optgroups = optDropdown.find('li.optgroup');\n      browserSelect.find('optgroup').each(function(i) {\n        expect($(this).attr('label')).toEqual(optgroups.eq(i)[0].innerText, 'should generate optgroup structure.');\n      });\n\n      expect(optInput).toExist('Should dynamically generate select dropdown structure.');\n      expect(optDropdown).toExist('Should dynamically generate select dropdown structure.');\n      expect(optInput).toBeVisible('Should be hidden before dropdown is opened.');\n      expect(optDropdown).toBeHidden('Should be hidden before dropdown is opened.');\n\n      optInput.click();\n\n      setTimeout(function() {\n        expect(optDropdown).toBeVisible('Should be visible after opening.');\n        var secondOption = optDropdown.find('li:not(.disabled):not(.optgroup)').eq(1);\n        secondOption.click();\n        optInput.blur();\n\n        setTimeout(function() {\n          expect(optDropdown).toBeHidden('Should be hidden after choosing item.');\n          expect(optInput.val()).toEqual(secondOption[0].innerText, 'Value should be equal to selected option.');\n          done();\n        }, 400);\n      }, 400);\n    });\n\n    it(\"should have options inside optgroup indented\", function() {\n      optionInOptgroup = browserSelect.parent().find('li.optgroup + li');\n      optionAfterOptGroup = browserSelect.parent().find('ul li:last-child');\n\n      expect(optionInOptgroup).toHaveClass('optgroup-option', 'Should have optgroup-option class');\n      expect(optionAfterOptGroup).not.toHaveClass('optgroup-option', 'Should not have optgroup-option class');\n    });\n\n    it(\"should not do anything when optgroup li clicked\", function(done) {\n      optInput = browserSelect.parent().find('input.select-dropdown');\n      optDropdown = browserSelect.parent().find('ul.select-dropdown');\n      var originalVal = optInput.val();\n\n      var optgroups = optDropdown.find('li.optgroup');\n      browserSelect.find('optgroup').each(function(i) {\n        expect($(this).attr('label')).toEqual(optgroups.eq(i)[0].innerText, 'should generate optgroup structure.');\n      });\n\n      expect(optInput).toExist('Should dynamically generate select dropdown structure.');\n      expect(optDropdown).toExist('Should dynamically generate select dropdown structure.');\n      expect(optInput).toBeVisible('Should be hidden before dropdown is opened.');\n      expect(optDropdown).toBeHidden('Should be hidden before dropdown is opened.');\n\n      optInput.click();\n\n      setTimeout(function() {\n        expect(optDropdown).toBeVisible('Should be visible after opening.');\n        var optgroup = optDropdown.find('li.optgroup').first();\n        optgroup.click();\n        optInput.blur();\n\n        setTimeout(function() {\n          expect(optDropdown).toBeHidden('Should be hidden after choosing invalid item.');\n          expect(optInput.val()).toEqual(originalVal, 'Value should be equal to original option.');\n          done();\n        }, 400);\n      }, 400);\n    });\n\n  });\n});\n"]}