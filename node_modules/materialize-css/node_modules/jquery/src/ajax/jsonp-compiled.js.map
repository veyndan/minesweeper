{"version":3,"sources":["jsonp.js"],"names":[],"mappings":"AAAA,OAAQ,CACP,SADO,EAEP,aAFO,EAGP,cAHO,EAIP,SAJO,CAAR,EAKG,UAAU,MAAV,EAAkB,KAAlB,EAAyB,MAAzB,EAAkC;;AAErC,KAAI,eAAe,EAAnB;AAAA,KACC,SAAS,mBADV;;;AAIA,QAAO,SAAP,CAAkB;AACjB,SAAO,UADU;AAEjB,iBAAe,YAAW;AACzB,OAAI,WAAW,aAAa,GAAb,MAAwB,OAAO,OAAP,GAAiB,GAAjB,GAAyB,OAAhE;AACA,QAAM,QAAN,IAAmB,IAAnB;AACA,UAAO,QAAP;AACA;AANgB,EAAlB;;;AAUA,QAAO,aAAP,CAAsB,YAAtB,EAAoC,UAAU,CAAV,EAAa,gBAAb,EAA+B,KAA/B,EAAuC;;AAE1E,MAAI,YAAJ;AAAA,MAAkB,WAAlB;AAAA,MAA+B,iBAA/B;AAAA,MACC,WAAW,EAAE,KAAF,KAAY,KAAZ,KAAuB,OAAO,IAAP,CAAa,EAAE,GAAf,IACjC,KADiC,GAEjC,OAAO,EAAE,IAAT,KAAkB,QAAlB,IACC,CAAE,EAAE,WAAF,IAAiB,EAAnB,EACE,OADF,CACW,mCADX,MACqD,CAFtD,IAGC,OAAO,IAAP,CAAa,EAAE,IAAf,CAHD,IAG0B,MALhB,CADZ;;;AAUA,MAAK,YAAY,EAAE,SAAF,CAAa,CAAb,MAAqB,OAAtC,EAAgD;;;AAG/C,kBAAe,EAAE,aAAF,GAAkB,OAAO,UAAP,CAAmB,EAAE,aAArB,IAChC,EAAE,aAAF,EADgC,GAEhC,EAAE,aAFH;;;AAKA,OAAK,QAAL,EAAgB;AACf,MAAG,QAAH,IAAgB,EAAG,QAAH,EAAc,OAAd,CAAuB,MAAvB,EAA+B,OAAO,YAAtC,CAAhB;AACA,IAFD,MAEO,IAAK,EAAE,KAAF,KAAY,KAAjB,EAAyB;AAC/B,MAAE,GAAF,IAAS,CAAE,OAAO,IAAP,CAAa,EAAE,GAAf,IAAuB,GAAvB,GAA6B,GAA/B,IAAuC,EAAE,KAAzC,GAAiD,GAAjD,GAAuD,YAAhE;AACA;;;AAGD,KAAE,UAAF,CAAc,aAAd,IAAgC,YAAW;AAC1C,QAAK,CAAC,iBAAN,EAA0B;AACzB,YAAO,KAAP,CAAc,eAAe,iBAA7B;AACA;AACD,WAAO,kBAAmB,CAAnB,CAAP;AACA,IALD;;;AAQA,KAAE,SAAF,CAAa,CAAb,IAAmB,MAAnB;;;AAGA,iBAAc,OAAQ,YAAR,CAAd;AACA,UAAQ,YAAR,IAAyB,YAAW;AACnC,wBAAoB,SAApB;AACA,IAFD;;;AAKA,SAAM,MAAN,CAAc,YAAW;;;AAGxB,QAAK,gBAAgB,SAArB,EAAiC;AAChC,YAAQ,MAAR,EAAiB,UAAjB,CAA6B,YAA7B;;;AAGA,KAJD,MAIO;AACN,YAAQ,YAAR,IAAyB,WAAzB;AACA;;;AAGD,QAAK,EAAG,YAAH,CAAL,EAAyB;;;AAGxB,OAAE,aAAF,GAAkB,iBAAiB,aAAnC;;;AAGA,kBAAa,IAAb,CAAmB,YAAnB;AACA;;;AAGD,QAAK,qBAAqB,OAAO,UAAP,CAAmB,WAAnB,CAA1B,EAA6D;AAC5D,iBAAa,kBAAmB,CAAnB,CAAb;AACA;;AAED,wBAAoB,cAAc,SAAlC;AACA,IA3BD;;;AA8BA,UAAO,QAAP;AACA;AACD,EA5ED;AA8EC,CAnGD","file":"jsonp-compiled.js","sourcesContent":["define( [\n\t\"../core\",\n\t\"./var/nonce\",\n\t\"./var/rquery\",\n\t\"../ajax\"\n], function( jQuery, nonce, rquery ) {\n\nvar oldCallbacks = [],\n\trjsonp = /(=)\\?(?=&|$)|\\?\\?/;\n\n// Default jsonp settings\njQuery.ajaxSetup( {\n\tjsonp: \"callback\",\n\tjsonpCallback: function() {\n\t\tvar callback = oldCallbacks.pop() || ( jQuery.expando + \"_\" + ( nonce++ ) );\n\t\tthis[ callback ] = true;\n\t\treturn callback;\n\t}\n} );\n\n// Detect, normalize options and install callbacks for jsonp requests\njQuery.ajaxPrefilter( \"json jsonp\", function( s, originalSettings, jqXHR ) {\n\n\tvar callbackName, overwritten, responseContainer,\n\t\tjsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?\n\t\t\t\"url\" :\n\t\t\ttypeof s.data === \"string\" &&\n\t\t\t\t( s.contentType || \"\" )\n\t\t\t\t\t.indexOf( \"application/x-www-form-urlencoded\" ) === 0 &&\n\t\t\t\trjsonp.test( s.data ) && \"data\"\n\t\t);\n\n\t// Handle iff the expected data type is \"jsonp\" or we have a parameter to set\n\tif ( jsonProp || s.dataTypes[ 0 ] === \"jsonp\" ) {\n\n\t\t// Get callback name, remembering preexisting value associated with it\n\t\tcallbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?\n\t\t\ts.jsonpCallback() :\n\t\t\ts.jsonpCallback;\n\n\t\t// Insert callback into url or form data\n\t\tif ( jsonProp ) {\n\t\t\ts[ jsonProp ] = s[ jsonProp ].replace( rjsonp, \"$1\" + callbackName );\n\t\t} else if ( s.jsonp !== false ) {\n\t\t\ts.url += ( rquery.test( s.url ) ? \"&\" : \"?\" ) + s.jsonp + \"=\" + callbackName;\n\t\t}\n\n\t\t// Use data converter to retrieve json after script execution\n\t\ts.converters[ \"script json\" ] = function() {\n\t\t\tif ( !responseContainer ) {\n\t\t\t\tjQuery.error( callbackName + \" was not called\" );\n\t\t\t}\n\t\t\treturn responseContainer[ 0 ];\n\t\t};\n\n\t\t// Force json dataType\n\t\ts.dataTypes[ 0 ] = \"json\";\n\n\t\t// Install callback\n\t\toverwritten = window[ callbackName ];\n\t\twindow[ callbackName ] = function() {\n\t\t\tresponseContainer = arguments;\n\t\t};\n\n\t\t// Clean-up function (fires after converters)\n\t\tjqXHR.always( function() {\n\n\t\t\t// If previous value didn't exist - remove it\n\t\t\tif ( overwritten === undefined ) {\n\t\t\t\tjQuery( window ).removeProp( callbackName );\n\n\t\t\t// Otherwise restore preexisting value\n\t\t\t} else {\n\t\t\t\twindow[ callbackName ] = overwritten;\n\t\t\t}\n\n\t\t\t// Save back as free\n\t\t\tif ( s[ callbackName ] ) {\n\n\t\t\t\t// Make sure that re-using the options doesn't screw things around\n\t\t\t\ts.jsonpCallback = originalSettings.jsonpCallback;\n\n\t\t\t\t// Save the callback name for future use\n\t\t\t\toldCallbacks.push( callbackName );\n\t\t\t}\n\n\t\t\t// Call if it was a function and we have a response\n\t\t\tif ( responseContainer && jQuery.isFunction( overwritten ) ) {\n\t\t\t\toverwritten( responseContainer[ 0 ] );\n\t\t\t}\n\n\t\t\tresponseContainer = overwritten = undefined;\n\t\t} );\n\n\t\t// Delegate to script\n\t\treturn \"script\";\n\t}\n} );\n\n} );\n"]}