{"version":3,"sources":["max-open.js"],"names":[],"mappings":"AAAA,IAAI,OAAO,QAAQ,KAAR,EAAe,IAA1B;AACA,IAAI,KAAK,QAAQ,KAAR,CAAT;;AAEA,KAAK,oBAAL,EAA2B,UAAU,CAAV,EAAa;;;AAGtC,UAAQ,MAAR,CAAe,KAAf,CAAqB,EAArB;;;AAGA,MAAI,IAAI,IAAR;AACA,MAAI,QAAQ,CAAZ;AACA,MAAI,MAAM,EAAV;AACA,MAAI,QAAQ,IAAZ;AACA,MAAI,UAAU,KAAd;AACA,MAAI,aAAa,CAAjB;;AAEA,OAAK,IAAI,IAAI,CAAb,EAAgB,IAAI,CAApB,EAAuB,GAAvB,EAA4B;AAC1B;AACD;;AAED,WAAS,EAAT,GAAc;AACZ;AACA,OAAG,IAAH,CAAQ,UAAR,EAAoB,GAApB,EAAyB,UAAU,EAAV,EAAc,EAAd,EAAkB;AACzC,UAAI,EAAJ,EAAQ,MAAM,EAAN;AACR,UAAI,IAAJ,CAAS,EAAT;AACA,UAAI,KAAJ,EAAW;AACZ,KAJD;AAKD;;;AAGD,aAAW,YAAY;AACrB,YAAQ,KAAR;AACA,MAAE,KAAF,CAAQ,QAAQ,IAAI,MAApB,EAA4B,CAA5B;AACA;AACD,GAJD,EAIG,GAJH;;AAOA,WAAS,IAAT,GAAiB;AACf,QAAI,OAAJ,EAAa;AACb;;AAEA,QAAI,IAAI,MAAJ,KAAe,CAAnB,EAAsB;AACpB,cAAQ,KAAR,CAAc,sBAAd,EAAsC,UAAtC;;;;;;AAMA,QAAE,EAAF,CAAK,cAAc,CAAnB;AACA,aAAO,EAAE,GAAF,EAAP;AACD;;AAED,cAAU,IAAV;AACA,eAAW,YAAY;;AAErB,gBAAU,KAAV;AACA;AACD,KAJD,EAIG,GAJH;;;AAOA,QAAI,SAAS,IAAI,KAAJ,CAAU,CAAV,CAAb;AACA,QAAI,MAAJ,GAAa,CAAb;AACA,WAAO,OAAP,CAAe,UAAU,EAAV,EAAc;AAC3B,SAAG,KAAH,CAAS,EAAT,EAAa,UAAU,EAAV,EAAc;AACzB,YAAI,EAAJ,EAAQ,MAAM,EAAN;AACT,OAFD;AAGD,KAJD;AAKD;AACF,CAjED","file":"max-open-compiled.js","sourcesContent":["var test = require('tap').test\nvar fs = require('../')\n\ntest('open lots of stuff', function (t) {\n  // Get around EBADF from libuv by making sure that stderr is opened\n  // Otherwise Darwin will refuse to give us a FD for stderr!\n  process.stderr.write('')\n\n  // How many parallel open()'s to do\n  var n = 1024\n  var opens = 0\n  var fds = []\n  var going = true\n  var closing = false\n  var doneCalled = 0\n\n  for (var i = 0; i < n; i++) {\n    go()\n  }\n\n  function go() {\n    opens++\n    fs.open(__filename, 'r', function (er, fd) {\n      if (er) throw er\n      fds.push(fd)\n      if (going) go()\n    })\n  }\n\n  // should hit ulimit pretty fast\n  setTimeout(function () {\n    going = false\n    t.equal(opens - fds.length, n)\n    done()\n  }, 100)\n\n\n  function done () {\n    if (closing) return\n    doneCalled++\n\n    if (fds.length === 0) {\n      console.error('done called %d times', doneCalled)\n      // First because of the timeout\n      // Then to close the fd's opened afterwards\n      // Then this time, to complete.\n      // Might take multiple passes, depending on CPU speed\n      // and ulimit, but at least 3 in every case.\n      t.ok(doneCalled >= 2)\n      return t.end()\n    }\n\n    closing = true\n    setTimeout(function () {\n      // console.error('do closing again')\n      closing = false\n      done()\n    }, 100)\n\n    // console.error('closing time')\n    var closes = fds.slice(0)\n    fds.length = 0\n    closes.forEach(function (fd) {\n      fs.close(fd, function (er) {\n        if (er) throw er\n      })\n    })\n  }\n})\n"]}