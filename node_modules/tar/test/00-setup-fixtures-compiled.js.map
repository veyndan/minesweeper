{"version":3,"sources":["00-setup-fixtures.js"],"names":[],"mappings":";;;;;;;;;;;;;;AAcA,IAAI,MAAM,QAAQ,KAAR,CAAV;AAAA,IACE,gBAAgB,QAAQ,eAAR,CADlB;AAAA,IAEE,SAAS,QAAQ,QAAR,CAFX;AAAA,IAGE,OAAO,IAAI,IAHb;AAAA,IAIE,OAAO,QAAQ,MAAR,CAJT;;AAMA,KAAK,gBAAL,EAAuB,UAAU,CAAV,EAAa;AAClC,SAAO,KAAK,OAAL,CAAa,SAAb,EAAwB,UAAxB,CAAP,EAA4C,UAAU,EAAV,EAAc;AACxD,MAAE,OAAF,CAAU,EAAV,EAAc,oBAAd;AACA,MAAE,GAAF;AACD,GAHD;AAID,CALD;;AAOA,KAAK,WAAL,EAAkB,UAAU,CAAV,EAAa;AAC7B,SAAO,KAAK,OAAL,CAAa,SAAb,EAAwB,KAAxB,CAAP,EAAuC,UAAU,EAAV,EAAc;AACnD,MAAE,OAAF,CAAU,EAAV,EAAc,eAAd;AACA,MAAE,GAAF;AACD,GAHD;AAID,CALD;;AAOA,KAAK,kBAAL,EAAyB,UAAU,CAAV,EAAa;AACpC,MAAI,IAAI,cAAc,KAAd,CAAoB,KAApB,EACoB,CAAC,MAAD,EAAS,cAAT,CADpB,EAEoB,EAAE,KAAK,SAAP,EAFpB,CAAR;;AAIA,IAAE,MAAF,CAAS,EAAT,CAAY,MAAZ,EAAoB,QAApB;AACA,IAAE,MAAF,CAAS,EAAT,CAAY,MAAZ,EAAoB,QAApB;AACA,WAAS,QAAT,CAAmB,KAAnB,EAA0B;AACxB,YAAQ,MAAR,CAAe,KAAf,CAAqB,KAArB;AACD;;AAED,IAAE,EAAF,CAAK,MAAL,EAAa,UAAU,IAAV,EAAgB;AAC3B,MAAE,KAAF,CAAQ,IAAR,EAAc,CAAd,EAAiB,qCAAjB;AACA,QAAI,IAAJ,EAAU;AACR,QAAE,OAAF,CAAU,6DAAV;AACD;AACD,MAAE,GAAF;AACD,GAND;AAOD,CAlBD","file":"00-setup-fixtures-compiled.js","sourcesContent":["// the fixtures have some weird stuff that is painful\n// to include directly in the repo for various reasons.\n//\n// So, unpack the fixtures with the system tar first.\n//\n// This means, of course, that it'll only work if you\n// already have a tar implementation, and some of them\n// will not properly unpack the fixtures anyway.\n//\n// But, since usually those tests will fail on Windows\n// and other systems with less capable filesystems anyway,\n// at least this way we don't cause inconveniences by\n// merely cloning the repo or installing the package.\n\nvar tap = require(\"tap\")\n, child_process = require(\"child_process\")\n, rimraf = require(\"rimraf\")\n, test = tap.test\n, path = require(\"path\")\n\ntest(\"clean fixtures\", function (t) {\n  rimraf(path.resolve(__dirname, \"fixtures\"), function (er) {\n    t.ifError(er, \"rimraf ./fixtures/\")\n    t.end()\n  })\n})\n\ntest(\"clean tmp\", function (t) {\n  rimraf(path.resolve(__dirname, \"tmp\"), function (er) {\n    t.ifError(er, \"rimraf ./tmp/\")\n    t.end()\n  })\n})\n\ntest(\"extract fixtures\", function (t) {\n  var c = child_process.spawn(\"tar\"\n                             ,[\"xzvf\", \"fixtures.tgz\"]\n                             ,{ cwd: __dirname })\n\n  c.stdout.on(\"data\", errwrite)\n  c.stderr.on(\"data\", errwrite)\n  function errwrite (chunk) {\n    process.stderr.write(chunk)\n  }\n\n  c.on(\"exit\", function (code) {\n    t.equal(code, 0, \"extract fixtures should exit with 0\")\n    if (code) {\n      t.comment(\"Note, all tests from here on out will fail because of this.\")\n    }\n    t.end()\n  })\n})\n"]}