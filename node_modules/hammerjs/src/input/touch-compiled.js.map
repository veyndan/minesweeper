{"version":3,"sources":["touch.js"],"names":[],"mappings":"AAAA,IAAI,kBAAkB;AAClB,gBAAY,WADM;AAElB,eAAW,UAFO;AAGlB,cAAU,SAHQ;AAIlB,iBAAa;AAJK,CAAtB;;AAOA,IAAI,sBAAsB,2CAA1B;;;;;;;AAOA,SAAS,UAAT,GAAsB;AAClB,SAAK,QAAL,GAAgB,mBAAhB;AACA,SAAK,SAAL,GAAiB,EAAjB;;AAEA,UAAM,KAAN,CAAY,IAAZ,EAAkB,SAAlB;AACH;;AAED,QAAQ,UAAR,EAAoB,KAApB,EAA2B;AACvB,aAAS,SAAS,UAAT,CAAoB,EAApB,EAAwB;AAC7B,YAAI,OAAO,gBAAgB,GAAG,IAAnB,CAAX;AACA,YAAI,UAAU,WAAW,IAAX,CAAgB,IAAhB,EAAsB,EAAtB,EAA0B,IAA1B,CAAd;AACA,YAAI,CAAC,OAAL,EAAc;AACV;AACH;;AAED,aAAK,QAAL,CAAc,KAAK,OAAnB,EAA4B,IAA5B,EAAkC;AAC9B,sBAAU,QAAQ,CAAR,CADoB;AAE9B,6BAAiB,QAAQ,CAAR,CAFa;AAG9B,yBAAa,gBAHiB;AAI9B,sBAAU;AAJoB,SAAlC;AAMH;AAdsB,CAA3B;;;;;;;;AAuBA,SAAS,UAAT,CAAoB,EAApB,EAAwB,IAAxB,EAA8B;AAC1B,QAAI,aAAa,QAAQ,GAAG,OAAX,CAAjB;AACA,QAAI,YAAY,KAAK,SAArB;;;AAGA,QAAI,QAAQ,cAAc,UAAtB,KAAqC,WAAW,MAAX,KAAsB,CAA/D,EAAkE;AAC9D,kBAAU,WAAW,CAAX,EAAc,UAAxB,IAAsC,IAAtC;AACA,eAAO,CAAC,UAAD,EAAa,UAAb,CAAP;AACH;;AAED,QAAI,CAAJ;AAAA,QACI,aADJ;AAAA,QAEI,iBAAiB,QAAQ,GAAG,cAAX,CAFrB;AAAA,QAGI,uBAAuB,EAH3B;AAAA,QAII,SAAS,KAAK,MAJlB;;;AAOA,oBAAgB,WAAW,MAAX,CAAkB,UAAS,KAAT,EAAgB;AAC9C,eAAO,UAAU,MAAM,MAAhB,EAAwB,MAAxB,CAAP;AACH,KAFe,CAAhB;;;AAKA,QAAI,SAAS,WAAb,EAA0B;AACtB,YAAI,CAAJ;AACA,eAAO,IAAI,cAAc,MAAzB,EAAiC;AAC7B,sBAAU,cAAc,CAAd,EAAiB,UAA3B,IAAyC,IAAzC;AACA;AACH;AACJ;;;AAGD,QAAI,CAAJ;AACA,WAAO,IAAI,eAAe,MAA1B,EAAkC;AAC9B,YAAI,UAAU,eAAe,CAAf,EAAkB,UAA5B,CAAJ,EAA6C;AACzC,iCAAqB,IAArB,CAA0B,eAAe,CAAf,CAA1B;AACH;;;AAGD,YAAI,QAAQ,YAAY,YAApB,CAAJ,EAAuC;AACnC,mBAAO,UAAU,eAAe,CAAf,EAAkB,UAA5B,CAAP;AACH;AACD;AACH;;AAED,QAAI,CAAC,qBAAqB,MAA1B,EAAkC;AAC9B;AACH;;AAED,WAAO;;AAEH,gBAAY,cAAc,MAAd,CAAqB,oBAArB,CAAZ,EAAwD,YAAxD,EAAsE,IAAtE,CAFG,EAGH,oBAHG,CAAP;AAKH","file":"touch-compiled.js","sourcesContent":["var TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar TOUCH_TARGET_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Multi-user touch events input\n * @constructor\n * @extends Input\n */\nfunction TouchInput() {\n    this.evTarget = TOUCH_TARGET_EVENTS;\n    this.targetIds = {};\n\n    Input.apply(this, arguments);\n}\n\ninherit(TouchInput, Input, {\n    handler: function MTEhandler(ev) {\n        var type = TOUCH_INPUT_MAP[ev.type];\n        var touches = getTouches.call(this, ev, type);\n        if (!touches) {\n            return;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction getTouches(ev, type) {\n    var allTouches = toArray(ev.touches);\n    var targetIds = this.targetIds;\n\n    // when there is only one touch, the process can be simplified\n    if (type & (INPUT_START | INPUT_MOVE) && allTouches.length === 1) {\n        targetIds[allTouches[0].identifier] = true;\n        return [allTouches, allTouches];\n    }\n\n    var i,\n        targetTouches,\n        changedTouches = toArray(ev.changedTouches),\n        changedTargetTouches = [],\n        target = this.target;\n\n    // get target touches from touches\n    targetTouches = allTouches.filter(function(touch) {\n        return hasParent(touch.target, target);\n    });\n\n    // collect touches\n    if (type === INPUT_START) {\n        i = 0;\n        while (i < targetTouches.length) {\n            targetIds[targetTouches[i].identifier] = true;\n            i++;\n        }\n    }\n\n    // filter changed touches to only contain touches that exist in the collected target ids\n    i = 0;\n    while (i < changedTouches.length) {\n        if (targetIds[changedTouches[i].identifier]) {\n            changedTargetTouches.push(changedTouches[i]);\n        }\n\n        // cleanup removed touches\n        if (type & (INPUT_END | INPUT_CANCEL)) {\n            delete targetIds[changedTouches[i].identifier];\n        }\n        i++;\n    }\n\n    if (!changedTargetTouches.length) {\n        return;\n    }\n\n    return [\n        // merge targetTouches with changedTargetTouches so it contains ALL touches, including 'end' and 'cancel'\n        uniqueArray(targetTouches.concat(changedTargetTouches), 'identifier', true),\n        changedTargetTouches\n    ];\n}\n"]}