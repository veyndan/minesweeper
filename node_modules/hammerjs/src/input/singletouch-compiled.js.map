{"version":3,"sources":["singletouch.js"],"names":[],"mappings":"AAAA,IAAI,yBAAyB;AACzB,gBAAY,WADa;AAEzB,eAAW,UAFc;AAGzB,cAAU,SAHe;AAIzB,iBAAa;AAJY,CAA7B;;AAOA,IAAI,6BAA6B,YAAjC;AACA,IAAI,6BAA6B,2CAAjC;;;;;;;AAOA,SAAS,gBAAT,GAA4B;AACxB,SAAK,QAAL,GAAgB,0BAAhB;AACA,SAAK,KAAL,GAAa,0BAAb;AACA,SAAK,OAAL,GAAe,KAAf;;AAEA,UAAM,KAAN,CAAY,IAAZ,EAAkB,SAAlB;AACH;;AAED,QAAQ,gBAAR,EAA0B,KAA1B,EAAiC;AAC7B,aAAS,SAAS,SAAT,CAAmB,EAAnB,EAAuB;AAC5B,YAAI,OAAO,uBAAuB,GAAG,IAA1B,CAAX;;;AAGA,YAAI,SAAS,WAAb,EAA0B;AACtB,iBAAK,OAAL,GAAe,IAAf;AACH;;AAED,YAAI,CAAC,KAAK,OAAV,EAAmB;AACf;AACH;;AAED,YAAI,UAAU,uBAAuB,IAAvB,CAA4B,IAA5B,EAAkC,EAAlC,EAAsC,IAAtC,CAAd;;;AAGA,YAAI,QAAQ,YAAY,YAApB,KAAqC,QAAQ,CAAR,EAAW,MAAX,GAAoB,QAAQ,CAAR,EAAW,MAA/B,KAA0C,CAAnF,EAAsF;AAClF,iBAAK,OAAL,GAAe,KAAf;AACH;;AAED,aAAK,QAAL,CAAc,KAAK,OAAnB,EAA4B,IAA5B,EAAkC;AAC9B,sBAAU,QAAQ,CAAR,CADoB;AAE9B,6BAAiB,QAAQ,CAAR,CAFa;AAG9B,yBAAa,gBAHiB;AAI9B,sBAAU;AAJoB,SAAlC;AAMH;AA1B4B,CAAjC;;;;;;;;AAmCA,SAAS,sBAAT,CAAgC,EAAhC,EAAoC,IAApC,EAA0C;AACtC,QAAI,MAAM,QAAQ,GAAG,OAAX,CAAV;AACA,QAAI,UAAU,QAAQ,GAAG,cAAX,CAAd;;AAEA,QAAI,QAAQ,YAAY,YAApB,CAAJ,EAAuC;AACnC,cAAM,YAAY,IAAI,MAAJ,CAAW,OAAX,CAAZ,EAAiC,YAAjC,EAA+C,IAA/C,CAAN;AACH;;AAED,WAAO,CAAC,GAAD,EAAM,OAAN,CAAP;AACH","file":"singletouch-compiled.js","sourcesContent":["var SINGLE_TOUCH_INPUT_MAP = {\n    touchstart: INPUT_START,\n    touchmove: INPUT_MOVE,\n    touchend: INPUT_END,\n    touchcancel: INPUT_CANCEL\n};\n\nvar SINGLE_TOUCH_TARGET_EVENTS = 'touchstart';\nvar SINGLE_TOUCH_WINDOW_EVENTS = 'touchstart touchmove touchend touchcancel';\n\n/**\n * Touch events input\n * @constructor\n * @extends Input\n */\nfunction SingleTouchInput() {\n    this.evTarget = SINGLE_TOUCH_TARGET_EVENTS;\n    this.evWin = SINGLE_TOUCH_WINDOW_EVENTS;\n    this.started = false;\n\n    Input.apply(this, arguments);\n}\n\ninherit(SingleTouchInput, Input, {\n    handler: function TEhandler(ev) {\n        var type = SINGLE_TOUCH_INPUT_MAP[ev.type];\n\n        // should we handle the touch events?\n        if (type === INPUT_START) {\n            this.started = true;\n        }\n\n        if (!this.started) {\n            return;\n        }\n\n        var touches = normalizeSingleTouches.call(this, ev, type);\n\n        // when done, reset the started state\n        if (type & (INPUT_END | INPUT_CANCEL) && touches[0].length - touches[1].length === 0) {\n            this.started = false;\n        }\n\n        this.callback(this.manager, type, {\n            pointers: touches[0],\n            changedPointers: touches[1],\n            pointerType: INPUT_TYPE_TOUCH,\n            srcEvent: ev\n        });\n    }\n});\n\n/**\n * @this {TouchInput}\n * @param {Object} ev\n * @param {Number} type flag\n * @returns {undefined|Array} [all, changed]\n */\nfunction normalizeSingleTouches(ev, type) {\n    var all = toArray(ev.touches);\n    var changed = toArray(ev.changedTouches);\n\n    if (type & (INPUT_END | INPUT_CANCEL)) {\n        all = uniqueArray(all.concat(changed), 'identifier', true);\n    }\n\n    return [all, changed];\n}\n"]}