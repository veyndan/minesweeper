{"version":3,"sources":["pan.js"],"names":[],"mappings":";;;;;;AAMA,SAAS,aAAT,GAAyB;AACrB,mBAAe,KAAf,CAAqB,IAArB,EAA2B,SAA3B;;AAEA,SAAK,EAAL,GAAU,IAAV;AACA,SAAK,EAAL,GAAU,IAAV;AACH;;AAED,QAAQ,aAAR,EAAuB,cAAvB,EAAuC;;;;;AAKnC,cAAU;AACN,eAAO,KADD;AAEN,mBAAW,EAFL;AAGN,kBAAU,CAHJ;AAIN,mBAAW;AAJL,KALyB;;AAYnC,oBAAgB,YAAW;AACvB,YAAI,YAAY,KAAK,OAAL,CAAa,SAA7B;AACA,YAAI,UAAU,EAAd;AACA,YAAI,YAAY,oBAAhB,EAAsC;AAClC,oBAAQ,IAAR,CAAa,kBAAb;AACH;AACD,YAAI,YAAY,kBAAhB,EAAoC;AAChC,oBAAQ,IAAR,CAAa,kBAAb;AACH;AACD,eAAO,OAAP;AACH,KAtBkC;;AAwBnC,mBAAe,UAAS,KAAT,EAAgB;AAC3B,YAAI,UAAU,KAAK,OAAnB;AACA,YAAI,WAAW,IAAf;AACA,YAAI,WAAW,MAAM,QAArB;AACA,YAAI,YAAY,MAAM,SAAtB;AACA,YAAI,IAAI,MAAM,MAAd;AACA,YAAI,IAAI,MAAM,MAAd;;;AAGA,YAAI,EAAE,YAAY,QAAQ,SAAtB,CAAJ,EAAsC;AAClC,gBAAI,QAAQ,SAAR,GAAoB,oBAAxB,EAA8C;AAC1C,4BAAa,MAAM,CAAP,GAAY,cAAZ,GAA8B,IAAI,CAAL,GAAU,cAAV,GAA2B,eAApE;AACA,2BAAW,KAAK,KAAK,EAArB;AACA,2BAAW,KAAK,GAAL,CAAS,MAAM,MAAf,CAAX;AACH,aAJD,MAIO;AACH,4BAAa,MAAM,CAAP,GAAY,cAAZ,GAA8B,IAAI,CAAL,GAAU,YAAV,GAAyB,cAAlE;AACA,2BAAW,KAAK,KAAK,EAArB;AACA,2BAAW,KAAK,GAAL,CAAS,MAAM,MAAf,CAAX;AACH;AACJ;AACD,cAAM,SAAN,GAAkB,SAAlB;AACA,eAAO,YAAY,WAAW,QAAQ,SAA/B,IAA4C,YAAY,QAAQ,SAAvE;AACH,KA9CkC;;AAgDnC,cAAU,UAAS,KAAT,EAAgB;AACtB,eAAO,eAAe,SAAf,CAAyB,QAAzB,CAAkC,IAAlC,CAAuC,IAAvC,EAA6C,KAA7C,MACF,KAAK,KAAL,GAAa,WAAb,IAA6B,EAAE,KAAK,KAAL,GAAa,WAAf,KAA+B,KAAK,aAAL,CAAmB,KAAnB,CAD1D,CAAP;AAEH,KAnDkC;;AAqDnC,UAAM,UAAS,KAAT,EAAgB;;AAElB,aAAK,EAAL,GAAU,MAAM,MAAhB;AACA,aAAK,EAAL,GAAU,MAAM,MAAhB;;AAEA,YAAI,YAAY,aAAa,MAAM,SAAnB,CAAhB;;AAEA,YAAI,SAAJ,EAAe;AACX,kBAAM,eAAN,GAAwB,KAAK,OAAL,CAAa,KAAb,GAAqB,SAA7C;AACH;AACD,aAAK,MAAL,CAAY,IAAZ,CAAiB,IAAjB,CAAsB,IAAtB,EAA4B,KAA5B;AACH;AAhEkC,CAAvC","file":"pan-compiled.js","sourcesContent":["/**\n * Pan\n * Recognized when the pointer is down and moved in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction PanRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n\n    this.pX = null;\n    this.pY = null;\n}\n\ninherit(PanRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof PanRecognizer\n     */\n    defaults: {\n        event: 'pan',\n        threshold: 10,\n        pointers: 1,\n        direction: DIRECTION_ALL\n    },\n\n    getTouchAction: function() {\n        var direction = this.options.direction;\n        var actions = [];\n        if (direction & DIRECTION_HORIZONTAL) {\n            actions.push(TOUCH_ACTION_PAN_Y);\n        }\n        if (direction & DIRECTION_VERTICAL) {\n            actions.push(TOUCH_ACTION_PAN_X);\n        }\n        return actions;\n    },\n\n    directionTest: function(input) {\n        var options = this.options;\n        var hasMoved = true;\n        var distance = input.distance;\n        var direction = input.direction;\n        var x = input.deltaX;\n        var y = input.deltaY;\n\n        // lock to axis?\n        if (!(direction & options.direction)) {\n            if (options.direction & DIRECTION_HORIZONTAL) {\n                direction = (x === 0) ? DIRECTION_NONE : (x < 0) ? DIRECTION_LEFT : DIRECTION_RIGHT;\n                hasMoved = x != this.pX;\n                distance = Math.abs(input.deltaX);\n            } else {\n                direction = (y === 0) ? DIRECTION_NONE : (y < 0) ? DIRECTION_UP : DIRECTION_DOWN;\n                hasMoved = y != this.pY;\n                distance = Math.abs(input.deltaY);\n            }\n        }\n        input.direction = direction;\n        return hasMoved && distance > options.threshold && direction & options.direction;\n    },\n\n    attrTest: function(input) {\n        return AttrRecognizer.prototype.attrTest.call(this, input) &&\n            (this.state & STATE_BEGAN || (!(this.state & STATE_BEGAN) && this.directionTest(input)));\n    },\n\n    emit: function(input) {\n\n        this.pX = input.deltaX;\n        this.pY = input.deltaY;\n\n        var direction = directionStr(input.direction);\n\n        if (direction) {\n            input.additionalEvent = this.options.event + direction;\n        }\n        this._super.emit.call(this, input);\n    }\n});\n"]}