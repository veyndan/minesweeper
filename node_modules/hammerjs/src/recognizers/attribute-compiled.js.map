{"version":3,"sources":["attribute.js"],"names":[],"mappings":";;;;;AAKA,SAAS,cAAT,GAA0B;AACtB,eAAW,KAAX,CAAiB,IAAjB,EAAuB,SAAvB;AACH;;AAED,QAAQ,cAAR,EAAwB,UAAxB,EAAoC;;;;;AAKhC,cAAU;;;;;AAKN,kBAAU;AALJ,KALsB;;;;;;;;AAmBhC,cAAU,UAAS,KAAT,EAAgB;AACtB,YAAI,iBAAiB,KAAK,OAAL,CAAa,QAAlC;AACA,eAAO,mBAAmB,CAAnB,IAAwB,MAAM,QAAN,CAAe,MAAf,KAA0B,cAAzD;AACH,KAtB+B;;;;;;;;AA8BhC,aAAS,UAAS,KAAT,EAAgB;AACrB,YAAI,QAAQ,KAAK,KAAjB;AACA,YAAI,YAAY,MAAM,SAAtB;;AAEA,YAAI,eAAe,SAAS,cAAc,aAAvB,CAAnB;AACA,YAAI,UAAU,KAAK,QAAL,CAAc,KAAd,CAAd;;;AAGA,YAAI,iBAAiB,YAAY,YAAZ,IAA4B,CAAC,OAA9C,CAAJ,EAA4D;AACxD,mBAAO,QAAQ,eAAf;AACH,SAFD,MAEO,IAAI,gBAAgB,OAApB,EAA6B;AAChC,gBAAI,YAAY,SAAhB,EAA2B;AACvB,uBAAO,QAAQ,WAAf;AACH,aAFD,MAEO,IAAI,EAAE,QAAQ,WAAV,CAAJ,EAA4B;AAC/B,uBAAO,WAAP;AACH;AACD,mBAAO,QAAQ,aAAf;AACH;AACD,eAAO,YAAP;AACH;AAjD+B,CAApC","file":"attribute-compiled.js","sourcesContent":["/**\n * This recognizer is just used as a base for the simple attribute recognizers.\n * @constructor\n * @extends Recognizer\n */\nfunction AttrRecognizer() {\n    Recognizer.apply(this, arguments);\n}\n\ninherit(AttrRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof AttrRecognizer\n     */\n    defaults: {\n        /**\n         * @type {Number}\n         * @default 1\n         */\n        pointers: 1\n    },\n\n    /**\n     * Used to check if it the recognizer receives valid input, like input.distance > 10.\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {Boolean} recognized\n     */\n    attrTest: function(input) {\n        var optionPointers = this.options.pointers;\n        return optionPointers === 0 || input.pointers.length === optionPointers;\n    },\n\n    /**\n     * Process the input and return the state for the recognizer\n     * @memberof AttrRecognizer\n     * @param {Object} input\n     * @returns {*} State\n     */\n    process: function(input) {\n        var state = this.state;\n        var eventType = input.eventType;\n\n        var isRecognized = state & (STATE_BEGAN | STATE_CHANGED);\n        var isValid = this.attrTest(input);\n\n        // on cancel input and we've recognized before, return STATE_CANCELLED\n        if (isRecognized && (eventType & INPUT_CANCEL || !isValid)) {\n            return state | STATE_CANCELLED;\n        } else if (isRecognized || isValid) {\n            if (eventType & INPUT_END) {\n                return state | STATE_ENDED;\n            } else if (!(state & STATE_BEGAN)) {\n                return STATE_BEGAN;\n            }\n            return state | STATE_CHANGED;\n        }\n        return STATE_FAILED;\n    }\n});\n"]}