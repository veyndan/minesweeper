{"version":3,"sources":["press.js"],"names":[],"mappings":";;;;;;AAMA,SAAS,eAAT,GAA2B;AACvB,eAAW,KAAX,CAAiB,IAAjB,EAAuB,SAAvB;;AAEA,SAAK,MAAL,GAAc,IAAd;AACA,SAAK,MAAL,GAAc,IAAd;AACH;;AAED,QAAQ,eAAR,EAAyB,UAAzB,EAAqC;;;;;AAKjC,cAAU;AACN,eAAO,OADD;AAEN,kBAAU,CAFJ;AAGN,cAAM,GAHA,E;AAIN,mBAAW,C;AAJL,KALuB;;AAYjC,oBAAgB,YAAW;AACvB,eAAO,CAAC,iBAAD,CAAP;AACH,KAdgC;;AAgBjC,aAAS,UAAS,KAAT,EAAgB;AACrB,YAAI,UAAU,KAAK,OAAnB;AACA,YAAI,gBAAgB,MAAM,QAAN,CAAe,MAAf,KAA0B,QAAQ,QAAtD;AACA,YAAI,gBAAgB,MAAM,QAAN,GAAiB,QAAQ,SAA7C;AACA,YAAI,YAAY,MAAM,SAAN,GAAkB,QAAQ,IAA1C;;AAEA,aAAK,MAAL,GAAc,KAAd;;;;AAIA,YAAI,CAAC,aAAD,IAAkB,CAAC,aAAnB,IAAqC,MAAM,SAAN,IAAmB,YAAY,YAA/B,KAAgD,CAAC,SAA1F,EAAsG;AAClG,iBAAK,KAAL;AACH,SAFD,MAEO,IAAI,MAAM,SAAN,GAAkB,WAAtB,EAAmC;AACtC,iBAAK,KAAL;AACA,iBAAK,MAAL,GAAc,kBAAkB,YAAW;AACvC,qBAAK,KAAL,GAAa,gBAAb;AACA,qBAAK,OAAL;AACH,aAHa,EAGX,QAAQ,IAHG,EAGG,IAHH,CAAd;AAIH,SANM,MAMA,IAAI,MAAM,SAAN,GAAkB,SAAtB,EAAiC;AACpC,mBAAO,gBAAP;AACH;AACD,eAAO,YAAP;AACH,KAtCgC;;AAwCjC,WAAO,YAAW;AACd,qBAAa,KAAK,MAAlB;AACH,KA1CgC;;AA4CjC,UAAM,UAAS,KAAT,EAAgB;AAClB,YAAI,KAAK,KAAL,KAAe,gBAAnB,EAAqC;AACjC;AACH;;AAED,YAAI,SAAU,MAAM,SAAN,GAAkB,SAAhC,EAA4C;AACxC,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,OAAL,CAAa,KAAb,GAAqB,IAAvC,EAA6C,KAA7C;AACH,SAFD,MAEO;AACH,iBAAK,MAAL,CAAY,SAAZ,GAAwB,KAAxB;AACA,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,OAAL,CAAa,KAA/B,EAAsC,KAAK,MAA3C;AACH;AACJ;AAvDgC,CAArC","file":"press-compiled.js","sourcesContent":["/**\n * Press\n * Recognized when the pointer is down for x ms without any movement.\n * @constructor\n * @extends Recognizer\n */\nfunction PressRecognizer() {\n    Recognizer.apply(this, arguments);\n\n    this._timer = null;\n    this._input = null;\n}\n\ninherit(PressRecognizer, Recognizer, {\n    /**\n     * @namespace\n     * @memberof PressRecognizer\n     */\n    defaults: {\n        event: 'press',\n        pointers: 1,\n        time: 251, // minimal time of the pointer to be pressed\n        threshold: 9 // a minimal movement is ok, but keep it low\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_AUTO];\n    },\n\n    process: function(input) {\n        var options = this.options;\n        var validPointers = input.pointers.length === options.pointers;\n        var validMovement = input.distance < options.threshold;\n        var validTime = input.deltaTime > options.time;\n\n        this._input = input;\n\n        // we only allow little movement\n        // and we've reached an end event, so a tap is possible\n        if (!validMovement || !validPointers || (input.eventType & (INPUT_END | INPUT_CANCEL) && !validTime)) {\n            this.reset();\n        } else if (input.eventType & INPUT_START) {\n            this.reset();\n            this._timer = setTimeoutContext(function() {\n                this.state = STATE_RECOGNIZED;\n                this.tryEmit();\n            }, options.time, this);\n        } else if (input.eventType & INPUT_END) {\n            return STATE_RECOGNIZED;\n        }\n        return STATE_FAILED;\n    },\n\n    reset: function() {\n        clearTimeout(this._timer);\n    },\n\n    emit: function(input) {\n        if (this.state !== STATE_RECOGNIZED) {\n            return;\n        }\n\n        if (input && (input.eventType & INPUT_END)) {\n            this.manager.emit(this.options.event + 'up', input);\n        } else {\n            this._input.timeStamp = now();\n            this.manager.emit(this.options.event, this._input);\n        }\n    }\n});\n"]}