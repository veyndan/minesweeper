{"version":3,"sources":["swipe.js"],"names":[],"mappings":";;;;;;AAMA,SAAS,eAAT,GAA2B;AACvB,mBAAe,KAAf,CAAqB,IAArB,EAA2B,SAA3B;AACH;;AAED,QAAQ,eAAR,EAAyB,cAAzB,EAAyC;;;;;AAKrC,cAAU;AACN,eAAO,OADD;AAEN,mBAAW,EAFL;AAGN,kBAAU,GAHJ;AAIN,mBAAW,uBAAuB,kBAJ5B;AAKN,kBAAU;AALJ,KAL2B;;AAarC,oBAAgB,YAAW;AACvB,eAAO,cAAc,SAAd,CAAwB,cAAxB,CAAuC,IAAvC,CAA4C,IAA5C,CAAP;AACH,KAfoC;;AAiBrC,cAAU,UAAS,KAAT,EAAgB;AACtB,YAAI,YAAY,KAAK,OAAL,CAAa,SAA7B;AACA,YAAI,QAAJ;;AAEA,YAAI,aAAa,uBAAuB,kBAApC,CAAJ,EAA6D;AACzD,uBAAW,MAAM,eAAjB;AACH,SAFD,MAEO,IAAI,YAAY,oBAAhB,EAAsC;AACzC,uBAAW,MAAM,gBAAjB;AACH,SAFM,MAEA,IAAI,YAAY,kBAAhB,EAAoC;AACvC,uBAAW,MAAM,gBAAjB;AACH;;AAED,eAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,IAArB,CAA0B,IAA1B,EAAgC,KAAhC,KACH,YAAY,MAAM,eADf,IAEH,MAAM,QAAN,GAAiB,KAAK,OAAL,CAAa,SAF3B,IAGH,MAAM,WAAN,IAAqB,KAAK,OAAL,CAAa,QAH/B,IAIH,IAAI,QAAJ,IAAgB,KAAK,OAAL,CAAa,QAJ1B,IAIsC,MAAM,SAAN,GAAkB,SAJ/D;AAKH,KAlCoC;;AAoCrC,UAAM,UAAS,KAAT,EAAgB;AAClB,YAAI,YAAY,aAAa,MAAM,eAAnB,CAAhB;AACA,YAAI,SAAJ,EAAe;AACX,iBAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,OAAL,CAAa,KAAb,GAAqB,SAAvC,EAAkD,KAAlD;AACH;;AAED,aAAK,OAAL,CAAa,IAAb,CAAkB,KAAK,OAAL,CAAa,KAA/B,EAAsC,KAAtC;AACH;AA3CoC,CAAzC","file":"swipe-compiled.js","sourcesContent":["/**\n * Swipe\n * Recognized when the pointer is moving fast (velocity), with enough distance in the allowed direction.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction SwipeRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(SwipeRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof SwipeRecognizer\n     */\n    defaults: {\n        event: 'swipe',\n        threshold: 10,\n        velocity: 0.3,\n        direction: DIRECTION_HORIZONTAL | DIRECTION_VERTICAL,\n        pointers: 1\n    },\n\n    getTouchAction: function() {\n        return PanRecognizer.prototype.getTouchAction.call(this);\n    },\n\n    attrTest: function(input) {\n        var direction = this.options.direction;\n        var velocity;\n\n        if (direction & (DIRECTION_HORIZONTAL | DIRECTION_VERTICAL)) {\n            velocity = input.overallVelocity;\n        } else if (direction & DIRECTION_HORIZONTAL) {\n            velocity = input.overallVelocityX;\n        } else if (direction & DIRECTION_VERTICAL) {\n            velocity = input.overallVelocityY;\n        }\n\n        return this._super.attrTest.call(this, input) &&\n            direction & input.offsetDirection &&\n            input.distance > this.options.threshold &&\n            input.maxPointers == this.options.pointers &&\n            abs(velocity) > this.options.velocity && input.eventType & INPUT_END;\n    },\n\n    emit: function(input) {\n        var direction = directionStr(input.offsetDirection);\n        if (direction) {\n            this.manager.emit(this.options.event + direction, input);\n        }\n\n        this.manager.emit(this.options.event, input);\n    }\n});\n"]}