{"version":3,"sources":["rotate.js"],"names":[],"mappings":";;;;;;AAMA,SAAS,gBAAT,GAA4B;AACxB,mBAAe,KAAf,CAAqB,IAArB,EAA2B,SAA3B;AACH;;AAED,QAAQ,gBAAR,EAA0B,cAA1B,EAA0C;;;;;AAKtC,cAAU;AACN,eAAO,QADD;AAEN,mBAAW,CAFL;AAGN,kBAAU;AAHJ,KAL4B;;AAWtC,oBAAgB,YAAW;AACvB,eAAO,CAAC,iBAAD,CAAP;AACH,KAbqC;;AAetC,cAAU,UAAS,KAAT,EAAgB;AACtB,eAAO,KAAK,MAAL,CAAY,QAAZ,CAAqB,IAArB,CAA0B,IAA1B,EAAgC,KAAhC,MACF,KAAK,GAAL,CAAS,MAAM,QAAf,IAA2B,KAAK,OAAL,CAAa,SAAxC,IAAqD,KAAK,KAAL,GAAa,WADhE,CAAP;AAEH;AAlBqC,CAA1C","file":"rotate-compiled.js","sourcesContent":["/**\n * Rotate\n * Recognized when two or more pointer are moving in a circular motion.\n * @constructor\n * @extends AttrRecognizer\n */\nfunction RotateRecognizer() {\n    AttrRecognizer.apply(this, arguments);\n}\n\ninherit(RotateRecognizer, AttrRecognizer, {\n    /**\n     * @namespace\n     * @memberof RotateRecognizer\n     */\n    defaults: {\n        event: 'rotate',\n        threshold: 0,\n        pointers: 2\n    },\n\n    getTouchAction: function() {\n        return [TOUCH_ACTION_NONE];\n    },\n\n    attrTest: function(input) {\n        return this._super.attrTest.call(this, input) &&\n            (Math.abs(input.rotation) > this.options.threshold || this.state & STATE_BEGAN);\n    }\n});\n"]}