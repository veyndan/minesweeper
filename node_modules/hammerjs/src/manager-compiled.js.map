{"version":3,"sources":["manager.js"],"names":[],"mappings":"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","file":"manager-compiled.js","sourcesContent":["var STOP = 1;\nvar FORCED_STOP = 2;\n\n/**\n * Manager\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Manager(element, options) {\n    this.options = assign({}, Hammer.defaults, options || {});\n\n    this.options.inputTarget = this.options.inputTarget || element;\n\n    this.handlers = {};\n    this.session = {};\n    this.recognizers = [];\n    this.oldCssProps = {};\n\n    this.element = element;\n    this.input = createInputInstance(this);\n    this.touchAction = new TouchAction(this, this.options.touchAction);\n\n    toggleCssProps(this, true);\n\n    each(this.options.recognizers, function(item) {\n        var recognizer = this.add(new (item[0])(item[1]));\n        item[2] && recognizer.recognizeWith(item[2]);\n        item[3] && recognizer.requireFailure(item[3]);\n    }, this);\n}\n\nManager.prototype = {\n    /**\n     * set options\n     * @param {Object} options\n     * @returns {Manager}\n     */\n    set: function(options) {\n        assign(this.options, options);\n\n        // Options that need a little more setup\n        if (options.touchAction) {\n            this.touchAction.update();\n        }\n        if (options.inputTarget) {\n            // Clean up existing event listeners and reinitialize\n            this.input.destroy();\n            this.input.target = options.inputTarget;\n            this.input.init();\n        }\n        return this;\n    },\n\n    /**\n     * stop recognizing for this session.\n     * This session will be discarded, when a new [input]start event is fired.\n     * When forced, the recognizer cycle is stopped immediately.\n     * @param {Boolean} [force]\n     */\n    stop: function(force) {\n        this.session.stopped = force ? FORCED_STOP : STOP;\n    },\n\n    /**\n     * run the recognizers!\n     * called by the inputHandler function on every movement of the pointers (touches)\n     * it walks through all the recognizers and tries to detect the gesture that is being made\n     * @param {Object} inputData\n     */\n    recognize: function(inputData) {\n        var session = this.session;\n        if (session.stopped) {\n            return;\n        }\n\n        // run the touch-action polyfill\n        this.touchAction.preventDefaults(inputData);\n\n        var recognizer;\n        var recognizers = this.recognizers;\n\n        // this holds the recognizer that is being recognized.\n        // so the recognizer's state needs to be BEGAN, CHANGED, ENDED or RECOGNIZED\n        // if no recognizer is detecting a thing, it is set to `null`\n        var curRecognizer = session.curRecognizer;\n\n        // reset when the last recognizer is recognized\n        // or when we're in a new session\n        if (!curRecognizer || (curRecognizer && curRecognizer.state & STATE_RECOGNIZED)) {\n            curRecognizer = session.curRecognizer = null;\n        }\n\n        var i = 0;\n        while (i < recognizers.length) {\n            recognizer = recognizers[i];\n\n            // find out if we are allowed try to recognize the input for this one.\n            // 1.   allow if the session is NOT forced stopped (see the .stop() method)\n            // 2.   allow if we still haven't recognized a gesture in this session, or the this recognizer is the one\n            //      that is being recognized.\n            // 3.   allow if the recognizer is allowed to run simultaneous with the current recognized recognizer.\n            //      this can be setup with the `recognizeWith()` method on the recognizer.\n            if (session.stopped !== FORCED_STOP && ( // 1\n                    !curRecognizer || recognizer == curRecognizer || // 2\n                    recognizer.canRecognizeWith(curRecognizer))) { // 3\n                recognizer.recognize(inputData);\n            } else {\n                recognizer.reset();\n            }\n\n            // if the recognizer has been recognizing the input as a valid gesture, we want to store this one as the\n            // current active recognizer. but only if we don't already have an active recognizer\n            if (!curRecognizer && recognizer.state & (STATE_BEGAN | STATE_CHANGED | STATE_ENDED)) {\n                curRecognizer = session.curRecognizer = recognizer;\n            }\n            i++;\n        }\n    },\n\n    /**\n     * get a recognizer by its event name.\n     * @param {Recognizer|String} recognizer\n     * @returns {Recognizer|Null}\n     */\n    get: function(recognizer) {\n        if (recognizer instanceof Recognizer) {\n            return recognizer;\n        }\n\n        var recognizers = this.recognizers;\n        for (var i = 0; i < recognizers.length; i++) {\n            if (recognizers[i].options.event == recognizer) {\n                return recognizers[i];\n            }\n        }\n        return null;\n    },\n\n    /**\n     * add a recognizer to the manager\n     * existing recognizers with the same event name will be removed\n     * @param {Recognizer} recognizer\n     * @returns {Recognizer|Manager}\n     */\n    add: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'add', this)) {\n            return this;\n        }\n\n        // remove existing\n        var existing = this.get(recognizer.options.event);\n        if (existing) {\n            this.remove(existing);\n        }\n\n        this.recognizers.push(recognizer);\n        recognizer.manager = this;\n\n        this.touchAction.update();\n        return recognizer;\n    },\n\n    /**\n     * remove a recognizer by name or instance\n     * @param {Recognizer|String} recognizer\n     * @returns {Manager}\n     */\n    remove: function(recognizer) {\n        if (invokeArrayArg(recognizer, 'remove', this)) {\n            return this;\n        }\n\n        recognizer = this.get(recognizer);\n\n        // let's make sure this recognizer exists\n        if (recognizer) {\n            var recognizers = this.recognizers;\n            var index = inArray(recognizers, recognizer);\n\n            if (index !== -1) {\n                recognizers.splice(index, 1);\n                this.touchAction.update();\n            }\n        }\n\n        return this;\n    },\n\n    /**\n     * bind event\n     * @param {String} events\n     * @param {Function} handler\n     * @returns {EventEmitter} this\n     */\n    on: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n        if (handler === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            handlers[event] = handlers[event] || [];\n            handlers[event].push(handler);\n        });\n        return this;\n    },\n\n    /**\n     * unbind event, leave emit blank to remove all handlers\n     * @param {String} events\n     * @param {Function} [handler]\n     * @returns {EventEmitter} this\n     */\n    off: function(events, handler) {\n        if (events === undefined) {\n            return;\n        }\n\n        var handlers = this.handlers;\n        each(splitStr(events), function(event) {\n            if (!handler) {\n                delete handlers[event];\n            } else {\n                handlers[event] && handlers[event].splice(inArray(handlers[event], handler), 1);\n            }\n        });\n        return this;\n    },\n\n    /**\n     * emit event to the listeners\n     * @param {String} event\n     * @param {Object} data\n     */\n    emit: function(event, data) {\n        // we also want to trigger dom events\n        if (this.options.domEvents) {\n            triggerDomEvent(event, data);\n        }\n\n        // no handlers, so skip it all\n        var handlers = this.handlers[event] && this.handlers[event].slice();\n        if (!handlers || !handlers.length) {\n            return;\n        }\n\n        data.type = event;\n        data.preventDefault = function() {\n            data.srcEvent.preventDefault();\n        };\n\n        var i = 0;\n        while (i < handlers.length) {\n            handlers[i](data);\n            i++;\n        }\n    },\n\n    /**\n     * destroy the manager and unbinds all events\n     * it doesn't unbind dom events, that is the user own responsibility\n     */\n    destroy: function() {\n        this.element && toggleCssProps(this, false);\n\n        this.handlers = {};\n        this.session = {};\n        this.input.destroy();\n        this.element = null;\n    }\n};\n\n/**\n * add/remove the css properties as defined in manager.options.cssProps\n * @param {Manager} manager\n * @param {Boolean} add\n */\nfunction toggleCssProps(manager, add) {\n    var element = manager.element;\n    if (!element.style) {\n        return;\n    }\n    var prop;\n    each(manager.options.cssProps, function(value, name) {\n        prop = prefixed(element.style, name);\n        if (add) {\n            manager.oldCssProps[prop] = element.style[prop];\n            element.style[prop] = value;\n        } else {\n            element.style[prop] = manager.oldCssProps[prop] || '';\n        }\n    });\n    if (!add) {\n        manager.oldCssProps = {};\n    }\n}\n\n/**\n * trigger dom event\n * @param {String} event\n * @param {Object} data\n */\nfunction triggerDomEvent(event, data) {\n    var gestureEvent = document.createEvent('Event');\n    gestureEvent.initEvent(event, true, true);\n    gestureEvent.gesture = data;\n    data.target.dispatchEvent(gestureEvent);\n}\n"]}