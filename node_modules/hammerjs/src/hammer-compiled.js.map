{"version":3,"sources":["hammer.js"],"names":[],"mappings":";;;;;;AAMA,SAAS,MAAT,CAAgB,OAAhB,EAAyB,OAAzB,EAAkC;AAC9B,YAAU,WAAW,EAArB;AACA,UAAQ,WAAR,GAAsB,YAAY,QAAQ,WAApB,EAAiC,OAAO,QAAP,CAAgB,MAAjD,CAAtB;AACA,SAAO,IAAI,OAAJ,CAAY,OAAZ,EAAqB,OAArB,CAAP;AACH;;;;;AAKD,OAAO,OAAP,GAAiB,iBAAjB;;;;;;AAMA,OAAO,QAAP,GAAkB;;;;;;;AAOd,aAAW,KAPG;;;;;;;;AAed,eAAa,oBAfC;;;;;;AAqBd,UAAQ,IArBM;;;;;;;;;AA8Bd,eAAa,IA9BC;;;;;;;AAqCd,cAAY,IArCE;;;;;;;AA4Cd,UAAQ;;AAEJ,GAAC,gBAAD,EAAmB,EAAC,QAAQ,KAAT,EAAnB,CAFI,EAGJ,CAAC,eAAD,EAAkB,EAAC,QAAQ,KAAT,EAAlB,EAAmC,CAAC,QAAD,CAAnC,CAHI,EAIJ,CAAC,eAAD,EAAkB,EAAC,WAAW,oBAAZ,EAAlB,CAJI,EAKJ,CAAC,aAAD,EAAgB,EAAC,WAAW,oBAAZ,EAAhB,EAAmD,CAAC,OAAD,CAAnD,CALI,EAMJ,CAAC,aAAD,CANI,EAOJ,CAAC,aAAD,EAAgB,EAAC,OAAO,WAAR,EAAqB,MAAM,CAA3B,EAAhB,EAA+C,CAAC,KAAD,CAA/C,CAPI,EAQJ,CAAC,eAAD,CARI,CA5CM;;;;;;;AA4Dd,YAAU;;;;;;AAMN,gBAAY,MANN;;;;;;;AAaN,iBAAa,MAbP;;;;;;;;;AAsBN,kBAAc,MAtBR;;;;;;;AA6BN,oBAAgB,MA7BV;;;;;;;AAoCN,cAAU,MApCJ;;;;;;;;AA4CN,uBAAmB;AA5Cb;AA5DI,CAAlB","file":"hammer-compiled.js","sourcesContent":["/**\n * Simple way to create a manager with a default set of recognizers.\n * @param {HTMLElement} element\n * @param {Object} [options]\n * @constructor\n */\nfunction Hammer(element, options) {\n    options = options || {};\n    options.recognizers = ifUndefined(options.recognizers, Hammer.defaults.preset);\n    return new Manager(element, options);\n}\n\n/**\n * @const {string}\n */\nHammer.VERSION = '{{PKG_VERSION}}';\n\n/**\n * default settings\n * @namespace\n */\nHammer.defaults = {\n    /**\n     * set if DOM events are being triggered.\n     * But this is slower and unused by simple implementations, so disabled by default.\n     * @type {Boolean}\n     * @default false\n     */\n    domEvents: false,\n\n    /**\n     * The value for the touchAction property/fallback.\n     * When set to `compute` it will magically set the correct value based on the added recognizers.\n     * @type {String}\n     * @default compute\n     */\n    touchAction: TOUCH_ACTION_COMPUTE,\n\n    /**\n     * @type {Boolean}\n     * @default true\n     */\n    enable: true,\n\n    /**\n     * EXPERIMENTAL FEATURE -- can be removed/changed\n     * Change the parent input target element.\n     * If Null, then it is being set the to main element.\n     * @type {Null|EventTarget}\n     * @default null\n     */\n    inputTarget: null,\n\n    /**\n     * force an input class\n     * @type {Null|Function}\n     * @default null\n     */\n    inputClass: null,\n\n    /**\n     * Default recognizer setup when calling `Hammer()`\n     * When creating a new Manager these will be skipped.\n     * @type {Array}\n     */\n    preset: [\n        // RecognizerClass, options, [recognizeWith, ...], [requireFailure, ...]\n        [RotateRecognizer, {enable: false}],\n        [PinchRecognizer, {enable: false}, ['rotate']],\n        [SwipeRecognizer, {direction: DIRECTION_HORIZONTAL}],\n        [PanRecognizer, {direction: DIRECTION_HORIZONTAL}, ['swipe']],\n        [TapRecognizer],\n        [TapRecognizer, {event: 'doubletap', taps: 2}, ['tap']],\n        [PressRecognizer]\n    ],\n\n    /**\n     * Some CSS properties can be used to improve the working of Hammer.\n     * Add them to this method and they will be set when creating a new Manager.\n     * @namespace\n     */\n    cssProps: {\n        /**\n         * Disables text selection to improve the dragging gesture. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userSelect: 'none',\n\n        /**\n         * Disable the Windows Phone grippers when pressing an element.\n         * @type {String}\n         * @default 'none'\n         */\n        touchSelect: 'none',\n\n        /**\n         * Disables the default callout shown when you touch and hold a touch target.\n         * On iOS, when you touch and hold a touch target such as a link, Safari displays\n         * a callout containing information about the link. This property allows you to disable that callout.\n         * @type {String}\n         * @default 'none'\n         */\n        touchCallout: 'none',\n\n        /**\n         * Specifies whether zooming is enabled. Used by IE10>\n         * @type {String}\n         * @default 'none'\n         */\n        contentZooming: 'none',\n\n        /**\n         * Specifies that an entire element should be draggable instead of its contents. Mainly for desktop browsers.\n         * @type {String}\n         * @default 'none'\n         */\n        userDrag: 'none',\n\n        /**\n         * Overrides the highlight color shown when the user taps a link or a JavaScript\n         * clickable element in iOS. This property obeys the alpha value, if specified.\n         * @type {String}\n         * @default 'rgba(0,0,0,0)'\n         */\n        tapHighlightColor: 'rgba(0,0,0,0)'\n    }\n};\n"]}