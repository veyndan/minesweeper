{"version":3,"sources":["test_require_failure.js"],"names":[],"mappings":"AAAA,IAAI,EAAJ;AAAA,IACI,MADJ;AAAA,IAEI,cAAc,GAFlB;AAAA,IAGI,iBAAiB,EAHrB;AAAA,IAII,aAAa,CAJjB;AAAA,IAKI,gBAAgB,CALpB;AAAA,IAMI,aAAa,CANjB;;AAQA,OAAO,mCAAP,EAA4C;AACxC,WAAO,YAAW;AACd,aAAK,MAAM,aAAN,EAAL;AACA,iBAAS,IAAI,MAAJ,CAAW,EAAX,EAAe,EAAC,aAAa,EAAd,EAAf,CAAT;;AAEA,YAAI,QAAQ,IAAI,OAAO,KAAX,CAAiB,EAAC,WAAW,CAAZ,EAAjB,CAAZ;AACA,YAAI,QAAQ,IAAI,OAAO,KAAX,CAAiB,EAAC,MAAM,WAAP,EAAoB,WAAW,cAA/B,EAAjB,CAAZ;;AAEA,eAAO,GAAP,CAAW,KAAX;AACA,eAAO,GAAP,CAAW,KAAX;;AAEA,cAAM,aAAN,CAAoB,KAApB;AACA,cAAM,cAAN,CAAqB,KAArB;;AAEA,qBAAa,CAAb;AACA,qBAAa,CAAb;AACA,eAAO,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC1B;AACH,SAFD;AAGA,eAAO,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC1B;AACH,SAFD;AAGH,KAtBuC;AAuBxC,cAAU,YAAW;AACjB,eAAO,OAAP;AACH;AAzBuC,CAA5C;;AA4BA,UAAU,yEAAV,EAAqF,YAAW;AAC5F,WAAO,CAAP;;AAEA,UAAM,kBAAN,CAAyB,EAAzB,EAA6B,OAA7B,EAAsC,EAAtC,EAA0C,EAA1C;;AAEA,eAAW,YAAW;AAClB;AACA,cAAM,UAAN,EAAkB,CAAlB;AACH,KAHD,EAGG,cAAc,GAHjB;AAIH,CATD;;AAWA,UAAU,wEAAV,EAAoF,YAAW;AAC3F,WAAO,CAAP;;AAEA,cAAU,QAAV,CAAmB,KAAnB,CAAyB,EAAzB,EAA6B,IAA7B,EAAmC,YAAW;AAC1C;;AAEA,WAAG,aAAa,CAAhB,EAAmB,qCAAnB;AACA,cAAM,UAAN,EAAkB,CAAlB,EAAqB,6EAArB;AACH,KALD;AAMH,CATD;AAUA,OAAO,iCAAP,EAA0C;AACtC,WAAO,YAAW;AACd,aAAK,SAAS,aAAT,CAAuB,KAAvB,CAAL;AACA,iBAAS,IAAT,CAAc,WAAd,CAA0B,EAA1B;;AAEA,iBAAS,IAAI,MAAJ,CAAW,EAAX,EAAe,EAAC,aAAa,EAAd,EAAf,CAAT;;AAEA,YAAI,MAAM,IAAI,OAAO,GAAX,CAAe,EAAC,WAAW,CAAZ,EAAf,CAAV;AACA,YAAI,QAAQ,IAAI,OAAO,KAAX,CAAiB,EAAC,MAAM,WAAP,EAAoB,WAAW,cAA/B,EAAjB,CAAZ;;AAEA,eAAO,GAAP,CAAW,CAAC,GAAD,EAAM,KAAN,CAAX;;AAEA,YAAI,aAAJ,CAAkB,KAAlB;AACA,cAAM,cAAN,CAAqB,GAArB;;AAEA,qBAAa,CAAb;AACA,wBAAgB,CAAhB;AACA,eAAO,EAAP,CAAU,OAAV,EAAmB,YAAW;AAC1B;AACH,SAFD;AAGA,eAAO,EAAP,CAAU,UAAV,EAAsB,YAAW;AAC7B;AACH,SAFD;AAGH,KAvBqC;AAwBtC,cAAU,YAAW;AACjB,iBAAS,IAAT,CAAc,WAAd,CAA0B,EAA1B;AACA,eAAO,OAAP;AACH;AA3BqC,CAA1C;;AA8BA,UAAU,uEAAV,EAAmF,YAAW;AAC1F,WAAO,CAAP;;AAEA,UAAM,kBAAN,CAAyB,EAAzB,EAA6B,OAA7B,EAAsC,EAAtC,EAA0C,EAA1C;;AAEA,eAAW,YAAW;AAClB;AACA,cAAM,UAAN,EAAkB,CAAlB;AACH,KAHD,EAGG,cAAc,GAHjB;AAIH,CATD;;AAWA,UAAU,kEAAV,EAA8E,YAAW;AACrF,WAAO,CAAP;;AAEA,UAAM,kBAAN,CAAyB,EAAzB,EAA6B,OAA7B,EAAsC,EAAtC,EAA0C,EAA1C;AACA,UAAM,kBAAN,CAAyB,EAAzB,EAA6B,MAA7B,EAAqC,KAAK,iBAAiB,CAA3D,EAA8D,EAA9D;;AAEA,eAAW,YAAW;AAClB;;AAEA,WAAG,gBAAgB,CAAnB,EAAsB,mCAAtB;AACA,cAAM,UAAN,EAAkB,CAAlB,EAAqB,2EAArB;AACH,KALD,EAKG,cAAc,GALjB;AAMH,CAZD","file":"test_require_failure-compiled.js","sourcesContent":["var el,\n    hammer,\n    pressPeriod = 200,\n    pressThreshold = 20,\n    pressCount = 0,\n    panStartCount = 0,\n    swipeCount = 0;\n\nmodule('Require Failure ( Swipe & Press )', {\n    setup: function() {\n        el = utils.createHitArea();\n        hammer = new Hammer(el, {recognizers: []});\n\n        var swipe = new Hammer.Swipe({threshold: 1});\n        var press = new Hammer.Press({time: pressPeriod, threshold: pressThreshold});\n\n        hammer.add(swipe);\n        hammer.add(press);\n\n        swipe.recognizeWith(press);\n        press.requireFailure(swipe);\n\n        pressCount = 0;\n        swipeCount = 0;\n        hammer.on('press', function() {\n            pressCount++;\n        });\n        hammer.on('swipe', function() {\n            swipeCount++;\n        });\n    },\n    teardown: function() {\n        hammer.destroy();\n    }\n});\n\nasyncTest('When swipe does not recognize the gesture, a press gesture can be fired', function() {\n    expect(1);\n\n    utils.dispatchTouchEvent(el, 'start', 50, 50);\n\n    setTimeout(function() {\n        start();\n        equal(pressCount, 1);\n    }, pressPeriod + 100);\n});\n\nasyncTest('When swipe does recognize the gesture, a press gesture cannot be fired', function() {\n    expect(2);\n\n    Simulator.gestures.swipe(el, null, function() {\n        start();\n\n        ok(swipeCount > 0, 'swipe gesture should be recognizing');\n        equal(pressCount, 0, 'press gesture should not be recognized because swipe gesture is recognizing');\n    });\n});\nmodule('Require Failure ( Pan & Press )', {\n    setup: function() {\n        el = document.createElement('div');\n        document.body.appendChild(el);\n\n        hammer = new Hammer(el, {recognizers: []});\n\n        var pan = new Hammer.Pan({threshold: 1});\n        var press = new Hammer.Press({time: pressPeriod, threshold: pressThreshold});\n\n        hammer.add([pan, press]);\n\n        pan.recognizeWith(press);\n        press.requireFailure(pan);\n\n        pressCount = 0;\n        panStartCount = 0;\n        hammer.on('press', function() {\n            pressCount++;\n        });\n        hammer.on('panstart', function() {\n            panStartCount++;\n        });\n    },\n    teardown: function() {\n        document.body.removeChild(el);\n        hammer.destroy();\n    }\n});\n\nasyncTest('When pan does not recognize the gesture, a press gesture can be fired', function() {\n    expect(1);\n\n    utils.dispatchTouchEvent(el, 'start', 50, 50);\n\n    setTimeout(function() {\n        start();\n        equal(pressCount, 1);\n    }, pressPeriod + 100);\n});\n\nasyncTest('When pan recognizes the gesture, a press gesture cannot be fired', function() {\n    expect(2);\n\n    utils.dispatchTouchEvent(el, 'start', 50, 50);\n    utils.dispatchTouchEvent(el, 'move', 50 + pressThreshold / 4, 50);\n\n    setTimeout(function() {\n        start();\n\n        ok(panStartCount > 0, 'pan gesture should be recognizing');\n        equal(pressCount, 0, 'press gesture should not be recognized because pan gesture is recognizing');\n    }, pressPeriod + 100);\n});\n"]}