{"version":3,"sources":["test_pan.js"],"names":[],"mappings":"AAAA,IAAI,EAAJ,EACI,MADJ;;AAGA,OAAO,aAAP,EAAsB;AAClB,WAAO,YAAW;AACd,aAAK,SAAS,aAAT,CAAuB,KAAvB,CAAL;AACA,iBAAS,IAAT,CAAc,WAAd,CAA0B,EAA1B;;AAEA,iBAAS,IAAI,MAAJ,CAAW,EAAX,EAAe,EAAC,aAAa,EAAd,EAAf,CAAT;AACH,KANiB;AAOlB,cAAU,YAAW;AACjB,iBAAS,IAAT,CAAc,WAAd,CAA0B,EAA1B;AACA,eAAO,OAAP;AACH;AAViB,CAAtB;;AAaA,KAAK,+CAAL,EAAsD,YAAW;AAC7D,WAAO,CAAP;;AAEA,QAAI,eAAe,CAAnB;AACA,QAAI,MAAM,IAAI,OAAO,GAAX,CAAe,EAAC,WAAW,CAAZ,EAAf,CAAV;;AAEA,WAAO,GAAP,CAAW,GAAX;AACA,WAAO,EAAP,CAAU,UAAV,EAAsB,YAAW;AAC/B,WAAG,IAAH;AACD,KAFD;AAGA,WAAO,EAAP,CAAU,SAAV,EAAqB,YAAW;AAC9B;AACD,KAFD;;AAIA,UAAM,kBAAN,CAAyB,EAAzB,EAA6B,OAA7B,EAAsC,EAAtC,EAA0C,EAA1C;AACA,UAAM,kBAAN,CAAyB,EAAzB,EAA6B,MAA7B,EAAqC,EAArC,EAAyC,EAAzC;AACA,UAAM,kBAAN,CAAyB,EAAzB,EAA6B,MAA7B,EAAqC,EAArC,EAAyC,EAAzC;;AAEA,UAAM,YAAN,EAAoB,CAApB;AACH,CAnBD;;AAqBA,UAAU,+CAAV,EAA2D,YAAW;AAClE,WAAO,CAAP;AACA,QAAI,MAAM,IAAI,OAAO,GAAX,CAAe,EAAC,WAAW,CAAZ,EAAf,CAAV;AACA,WAAO,GAAP,CAAW,GAAX;;AAEA,QAAI,YAAY,EAAhB;AACA,QAAI,kBAAkB,KAAtB;AACA,WAAO,EAAP,CAAU,UAAV,EAAsB,YAAW;AAC7B,qBAAa,OAAb;AACH,KAFD;AAGA,WAAO,EAAP,CAAU,SAAV,EAAqB,YAAW;AAC5B,YAAG,CAAC,eAAJ,EAAoB;AAChB,8BAAkB,IAAlB;AACA,yBAAa,MAAb;AACH;AACJ,KALD;AAMA,WAAO,EAAP,CAAU,QAAV,EAAoB,YAAW;AAC3B,qBAAa,KAAb;AACA,0BAAkB,IAAlB;AACH,KAHD;;AAKA,cAAU,QAAV,CAAmB,GAAnB,CAAuB,EAAvB,EAA2B,EAAE,QAAQ,CAAC,GAAX,EAAgB,QAAQ,CAAxB,EAA3B,EAAwD,YAAW;AAC/D,cAAM,SAAN,EAAgB,cAAhB;AACA;AACH,KAHD;AAIH,CAzBD","file":"test_pan-compiled.js","sourcesContent":["var el,\n    hammer;\n\nmodule('Pan Gesture', {\n    setup: function() {\n        el = document.createElement('div');\n        document.body.appendChild(el);\n\n        hammer = new Hammer(el, {recognizers: []});\n    },\n    teardown: function() {\n        document.body.removeChild(el);\n        hammer.destroy();\n    }\n});\n\ntest('`panstart` and `panmove` should be recognized', function() {\n    expect(2);\n\n    var panMoveCount = 0;\n    var pan = new Hammer.Pan({threshold: 1});\n\n    hammer.add(pan);\n    hammer.on('panstart', function() {\n      ok(true);\n    });\n    hammer.on('panmove', function() {\n      panMoveCount++;\n    });\n\n    utils.dispatchTouchEvent(el, 'start', 50, 50);\n    utils.dispatchTouchEvent(el, 'move', 70, 50);\n    utils.dispatchTouchEvent(el, 'move', 90, 50);\n\n    equal(panMoveCount, 1);\n});\n\nasyncTest('Pan event flow should be start -> left -> end', function() {\n    expect(1);\n    var pan = new Hammer.Pan({threshold: 1});\n    hammer.add(pan);\n\n    var eventflow = \"\";\n    var isCalledPanleft = false;\n    hammer.on('panstart', function() {\n        eventflow += \"start\";\n    });\n    hammer.on('panleft', function() {\n        if(!isCalledPanleft){\n            isCalledPanleft = true;\n            eventflow += \"left\";\n        }\n    });\n    hammer.on('panend', function() {\n        eventflow += \"end\";\n        isCalledPanleft = true;\n    });\n\n    Simulator.gestures.pan(el, { deltaX: -100, deltaY: 0 }, function() {\n        equal(eventflow,\"startleftend\");\n        start();\n    });\n});\n"]}